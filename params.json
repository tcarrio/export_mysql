{"name":"mysqldump-all","tagline":"Argument-driven bash script to perform fallback SQL dumps of all local MySQL databases","body":"# mysqldump-all\r\nArgument-driven bash script to perform fallback SQL dumps of all MySQL databases\r\n\r\n# about\r\nI began working on this script due to a failing SunOS 5 server, a system that is well over a decade old at this point. \r\n\r\nThe program is written to run on Unix-based systems with Bash. It requires MySQL be installed on the local system with both the `mysql` and `mysqldump` commands available. If they are not in the PATH, the script allows a directory to be specified to use as the executable origin. The script takes a username and password for accessing the specified MySQL server and will generate a SQL dump of every database in the server, resolving to SQL dumps of every table if a database were to fail. \r\n\r\nIt also supports complete logging of stdout to a file or verbose output, otherwise the process will run silent until complete. \r\n\r\n# example\r\nUsing mysqldump-all is pretty easy. You can perform a SQL dump of all local databases with the following command:\r\n\r\n````bash\r\n[tom@github] $ dump-all -u username -p password -o /path/to/backup/folder\r\n\r\n# or \r\n\r\n[tom@github] $ dump-all -u username -p password -o /tmp/backups/date -l /tmp/dumplog.txt\r\n````\r\n\r\nIf you ever need help remembering the exact arguments, you can call `dump-all -h` or `dump-all --help` to output a short output with information on available arguments\r\n\r\n# compatibility\r\nThe script should be fully functional on the following systems:\r\n* Solaris / SunOS\r\n* GNU/Linux\r\n* *BSD\r\n\r\n# arguments\r\n````\r\n-h show brief help\r\n-v show verbose output\r\n-l specify a file to store log output\r\n-u specify the user to access mysql\r\n-p specify the password to access mysql\r\n-e specify the path to mysql tools directory\r\n-o specify the output directory (default: pwd)\r\n````\r\n\r\n# requirements\r\n* mysql (tested v4.0.16+)\r\n  * mysql\r\n  * mysqldump\r\n* bash (tested v2.03.0+)\r\n\r\n# future functionality\r\nMy hopes are to implement a few conveniences for the system. My greatest hope would be to allow remote backup output. This could be done using a `user@host:/path/to/dir` syntax on the `-o` argument and automatically assume an SSH protocol for connection. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}